( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Retro                                                       )
( Copyright [c] 2009, Charles Childers                        )
( License: ISC                                                )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )

' meta open

3072 constant SCRATCH
3584 constant TIB
4096 constant HEAP
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
mark-dictionary    ( Pointer to the most recent dictionary    )
variable last      ( header                                   )
HEAP variable: heap ( Starting address of the data/code heap  )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
variable which     ( Pointer to dictionary header of the most )
                   ( recently looked up word                  )
variable compiler  ( Is the compiler on or off?               )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
label: copytag   " RETRO" $,
label: okmsg     " ok " $,
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
t: dup  ( n-nn )  dup, ;       t: 1+   ( n-n   )  1+, ;
t: 1-   ( n-n  )  1-, ;        t: swap ( xy-yx )  swap, ;
t: drop ( n-   )  drop, ;      t: and  ( xy-n  )  and, ;
t: or   ( xy-n )  or, ;        t: xor  ( xy-n  )  xor, ;
t: @    ( a-n  )  @, ;         t: !    ( na-   )  !, ;
t: +    ( xy-n )  +, ;         t: -    ( xy-n  )  -, ;
t: *    ( xy-n )  *, ;         t: /mod ( xy-qr )  /mod, ;
t: <<   ( xy-n )  <<, ;        t: >>   ( xy-n  )  >>, ;
t: out  ( np-  )  out, ;       t: in   ( p-n   )  in, ;

t: wait ( - )  0 # 0 # out, wait, ;

t: nip   ( xy-y   )  swap, drop, ;
t: over  ( xy-xyx )  push, dup, pop, swap, ;
t: 2drop ( nn-    )  drop, drop, ;
t: not   ( x-y    )  -1 # xor, ;
t: rot   ( xyz-yzx ) push, swap, pop, swap, ;
t: -rot  ( xyz-xzy ) swap, push, swap, pop, ;
t: tuck  ( xy-yxy )  dup, -rot ;
t: 2dup  ( x-xx   )  over over ;
t: on    ( a-     )  -1 # swap, !, ;
t: off   ( a-     )  0 # swap, !, ;
t: /     ( xy-q   )  /mod, nip ;
t: mod   ( xy-r   )  /mod, drop, ;
t: neg   ( x-y    )  -1 # *, ;
t: execute ( a-   )  1-, push, ;
t: later ( -      )  pop, pop, swap, push, push, ;
t: @+    ( a-ac   )  dup, 1+, swap, @, ;
t: !+    ( ca-a   )  dup, 1+, push, !, pop, ;
t: +!    ( na-    )  dup, push, @, +, pop, !, ;
t: -!    ( na-    )  dup, push, @, swap, -, pop, !, ;
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
t: t-here   ( -a  )  heap # @, ;
t: t-,      ( n-  )  t-here !, t-here 1+, heap # !, ;
t: t-]      ( -   )  compiler # on ;
t: t-[      ( -   )  compiler # off ;
t: t-;;     ( -   )  9 # t-, ;
t: t-;      ( -   )  t-;; t-[ ;
t: ($,)     ( a-a )  repeat @+ 0; t-, again ;
t: $        ( a-  )  ($,) drop, 0 # t-, ;
t: t-push   ( n-  )  5 # t-, ;
t: t-pop    ( -n  )  6 # t-, ;
t: compile  ( a-  )  7 # t-, t-, ;
t: literal, ( n-  )  1 # t-, t-, ;
t: t-for    ( R: n-   C: -a )
  t-here 5 # t-, ;
t: t-next   ( R: -    C: a- )
  6 # t-, 27 # t-, 2 # t-, 0 # literal, 12 # t-, t-, 3 # t-, ;
t: (if)     ( -a )
  t-, t-here 0 # t-, ;
t: t-=if    ( R: xy-  C: -a )
  12 # jump: (if)
t: t->if    ( R: xy-  C: -a )
  11 # jump: (if)
t: t-<if    ( R: xy-  C: -a )
  10 # jump: (if)
t: t-!if    ( R: xy-  C: -a )
  13 # jump: (if)
t: t-then   ( R: -    C: a- )
  t-here swap, !, ;
t: t-repeat ( R: -    C: -a )
  t-here ;
t: t-again  ( R: -    C: a- )
  8 # t-, t-, ;
t: t-0;     ( n-n || n -  )  25 # t-, ;

t: .word   ( a- )
   compiler # @, if 7 # t-, t-, ; then jump: execute
t: .macro  ( a- )
   jump: execute
t: .data   ( a- )
   compiler # @, 0; drop, jump: literal,

' .word  'WORD  set-class
' .macro 'MACRO set-class
' .data  'DATA  set-class
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
-1 variable: update
t: redraw ( -  ) update # @, 0; drop, 0 # 3 # out, ;
t: emit   ( c- )  1 # 2 # out, wait redraw ;
t: cr     ( -  ) 10 # emit ;
t: clear  ( -  ) -1 # emit ;
t: (type) ( a-a ) repeat @+ 0; emit again ;
t: type   ( a-  ) update # off (type) drop, update # on redraw ;
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
variable break           ( Holds the delimiter for 'accept'   )
-1 variable: whitespace  ( Allow extended whitespace          )

t: (remap-keys) ( c-c ) ;
t: ws ( c-c )
  dup, 127 # =if drop,  8 # then
  dup,  13 # =if drop, 10 # then
  whitespace # @, 0; drop,
  dup,   9 # =if drop, 32 # then
  dup,  10 # =if drop, 32 # then
;

t: key ( -c )
  repeat
    1 # 1 # out,
    wait 1 # in,
    dup, 0 # !if (remap-keys) ws ; then drop,
  again
;

t: ekey ( -c ) key dup, emit ;

t: eat-leading ( a-a )
  repeat
    ekey dup,
    break # @, !if swap, !+ ; then drop,
  again ;

t: (accept) ( a-a )
  repeat
    ekey
    dup, break # @, =if drop, ; then
    dup, 8 # =if drop, 1-, jump: (accept) then
    swap, !+
  again ;

t: accept ( c- )
  break # !, TIB # eat-leading (accept) 0 # swap, !+ drop, ;
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
t: d->class ( a-a )  1+, ;
t: d->xt    ( a-a )  1+, 1+, ;
t: d->name  ( a-a )  1+, 1+, 1+, ;
t: create   ( "-  )  t-here              ( Entry Start )
                     last # @, t-,       ( Link to previous )
                     last # !,           ( Set as newest )
                     ' .data # t-,       ( Class = .data )
                     t-here 0 # t-,      ( XT )
                     32 # accept TIB # $ ( Name )
                     t-here swap, !, ;   ( Patch XT to HERE )
t: (:)        ( -   )  last # @, d->class !, t-] 0 # t-, 0 # t-, ;
t: :          ( "-  )  create ' .word # (:) ;
t: t-(        ( "-  )  char: ) # accept ;
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( A more readable "compare":

  t: get-set  [ ab-xy ]  @, swap, @, ;
  t: next-set [ ab-cd ]  1+, swap, 1+, ;
  t: compare  [ $$-f  ]
     repeat
       2dup get-set
       2dup !if 2drop 2drop 0 # ; then
       +, 0 # =if 2drop -1 # ; then
       next-set
     again
  ;

  We use the less readable one below for performance
  reasons.
)

t: compare  ( $$-f )
   repeat
     dup, @, push, 1+, swap,
     dup, @, push, 1+, pop, dup, pop,
     !if drop, drop, dup, xor, ; then
   0 # 12 m, m,
   drop, drop, -1 #
;

t: (strlen)  ( a-na )
  repeat @+ 0; drop, swap, 1+, swap, again ;

t: getLength ( $-n )
  0 # swap, (strlen) drop, ;

t: tempString ( a-a  )
   heap # @, swap, SCRATCH # heap # !,
   $ heap # !, SCRATCH #
;

t: keepString  ( a-a )
  dup, getLength 1+, 1+, 1+, t-here +,
  8 # t-, t-,
  t-here swap,
  $ 0 # t-,
;

t: t-"  ( "-a )
  char: " # accept TIB # tempString ;
t: t-s" ( R: -a  C: "- )
  t-" keepString literal, ;
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
variable #value        variable num
variable negate?       variable flag

label: nums " 0123456789ABCDEF" $,
label: base 10 m,

t: digits
  repeat dup, push, nums # +, @, over =if num # on then pop, 0; 1-, again ;
t: (digit)
  base # @,
    dup, 10 # =if digits ; then
    dup, 16 # =if digits ; then
    dup,  8 # =if digits ; then
    dup,  2 # =if digits ; then
  drop,
;
t: digit?
  num # off (digit) drop, num # @, ;

t: char>digit ( c-n )
  char: 0 # -,
  base # @, 16 # =if dup, 16 # >if 7 # -, then then ;

t: isNegative?
  ( a-a+1 )
  dup, @, char: - # =if -1 # negate? # !, 1+, ; then
  1 # negate? # !, ;

t: (convert)
  repeat
    dup, @, 0; char>digit #value # @, base # @, *, +,
    #value # !, 1+,
  again ;

t: >number ( $-n )
  isNegative? 0 # #value # !, (convert) drop,
  #value # @, negate? # @, *, ;

t: (isnumber)
  repeat
    dup, @, 0; digit? flag # @, and, flag # !, 1+,
  again ;

t: isnumber?
  isNegative? -1 # flag # !, (isnumber) drop,
  flag # @, ;

t: <#> repeat base # @, /mod, swap, nums # +, @, swap, 0; again ;
t: neg? dup, 0 # >if ; then 45 # emit -1 # *, ;
t: display repeat 0; emit again ;
t: . neg? 0 # swap <#> display 32 # emit ;
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
variable found

t: (search)
  repeat
    dup, d->name TIB # compare if which # !, found # on ; then
    @, 0;
  again
;

t: search
  found # off last # @, (search) ;

t: t-'    ( "-a )
  32 # accept search
  found # @, if which # @, d->xt @, ; then 0 #
  found # on ;
t: t-[']  ( R: -a   C: "- )
  t-' literal, ;
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
t: :devector ( a-  )  dup, 0 # swap, !, 1+, 0 # swap, !, ;
t: :is       ( aa- )  dup, 8 # swap, !, 1+, !, ;
t: devector  ( "-  )  t-' :devector ;
t: is        ( a"- )  t-' :is ;
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
t: save   ( - )  1 # 4 # out, wait ;
t: bye    ( - )  halt, ;
t: depth  ( -n )
  -5 # 5 # out, wait, 5 # in, ;
t: reset  ( ...- )
  depth repeat 0; push, drop, pop, 1-, again ;
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
variable #mem   ( Amount of memory provided )
variable fb     ( canvas present?    )
variable fw     ( framebuffer width  )
variable fh     ( framebuffer height )

t: boot         ( -   ) copytag # type cr ;
t: capability:  ( n-n ) 5 # out, wait, 5 # in, ;
t: run-on-boot  ( -   )
  -1 # capability: #mem # !,  ( Memory Size )
  -2 # capability: fb #   !,  ( Canvas Present? )
  -3 # capability: fw #   !,  ( Canvas Width )
  -4 # capability: fh #   !,  ( Canvas Height )
  boot ;
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
t: with-class   ( ac- ) jump: execute
t: notfound     ( -   ) cr TIB # type 32 # emit char: ? # emit cr ;
t: the->xt      ( a-n ) which # @, d->xt @, ;
t: the->class   ( a-n ) which # @, d->class @, ;
t: tib->number? ( -f  ) TIB # isnumber? ;
t: tib->number  ( -n  ) TIB # >number ' .data # jump: with-class

t: word?   ( - )
  found # @, 0; drop, the->xt the->class jump: with-class
t: number? ( - )
  found # @, not 0; drop,
  tib->number? if tib->number ; then notfound ;
t: ok      ( - )
  compiler # @, 0 # =if cr okmsg # type then ;
t: listen  ( - )
  repeat ok 32 # accept search word? number? again ;

( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )

' 1+           word: 1+            ' 1-           word: 1-
' swap         word: swap          ' drop         word: drop
' and          word: and           ' or           word: or
' xor          word: xor           ' @            word: @
' !            word: !             ' +            word: +
' -            word: -             ' *            word: *
' /mod         word: /mod          ' <<           word: <<
' >>           word: >>            ' nip          word: nip
' dup          word: dup           ' in           word: in
' out          word: out           ' accept       word: accept
' t-here       word: here          ' t-,          word: ,
' t-]          word: ]             ' create       word: create
' :            word: :             ' later        word: later
' cr           word: cr            ' emit         word: emit
' type         word: type          ' clear        word: clear
' over         word: over          ' 2drop        word: 2drop
' not          word: not           ' rot          word: rot
' -rot         word: -rot          ' tuck         word: tuck
' 2dup         word: 2dup          ' on           word: on
' off          word: off           ' /            word: /
' mod          word: mod           ' neg          word: neg
' execute      word: execute       ' .            word: .
' t-"          word: "             ' compare      word: compare
' wait         word: wait          ' t-'          word: '
' @+           word: @+            ' !+           word: !+
' +!           word: +!            ' -!           word: -!
' :is          word: :is           ' :devector    word: :devector
' is           word: is            ' devector     word: devector
' compile      word: compile       ' literal,     word: literal,
' tempString   word: tempString    ' redraw       word: redraw
' keepString   word: keepString    ' getLength    word: getLength
' bye          word: bye           ' (remap-keys) word: (remap-keys)
' with-class   word: with-class    ' .word        word: .word
' .macro       word: .macro        ' .data        word: .data
' d->class     word: d->class      ' d->xt        word: d->xt
' d->name      word: d->name       ' boot         word: boot
' depth        word: depth         ' reset        word: reset
' notfound     word: notfound      ' save         word: save
' >number      word: >number       ' ok           word: ok
' listen       word: listen        ' isnumber?    word: isNumber?
' key          word: key           ' ekey         word: ekey

' t-s"         macro: s"        ' t-[          macro: [
' t-;          macro: ;         ' t-;;         macro: ;;
' t-=if        macro: =if       ' t->if        macro: >if
' t-<if        macro: <if       ' t-!if        macro: !if
' t-then       macro: then      ' t-repeat     macro: repeat
' t-again      macro: again     ' t-0;         macro: 0;
' t-push       macro: push      ' t-pop        macro: pop
' t-[']        macro: [']       ' t-for        macro: for
' t-next       macro: next      ' t-(          macro: (

  last         data: last          compiler     data: compiler
  TIB          data: tib           update       data: update
  fb           data: fb            fw           data: fw
  fh           data: fh            #mem         data: #mem
  heap         data: heap          which        data: which
  whitespace   data: whitespace    base         data: base

main: run-on-boot jump: listen

patch-dictionary
boot-new
