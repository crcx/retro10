( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Assembler and Metacompiler for Retro                        )
( Copyright [c] 2009, Charles Childers                        )
( License: ISC                                                )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Configuration                                               )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
4096 constant IMAGE-SIZE


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Some useful words that'll be helpful later on               )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: vars  ( n"- ) for variable next ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Variables used in the target image [classes, dictionary, etc)
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
7 vars target origin 'WORD 'MACRO 'DATA link chain


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( The assembler                                               )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: m,  ( n-  ) target @ ! 1 target +! ;
: vm: ( n"- ) create , does> @ m, ;

 0 vm: nop,          1 vm: lit,          2 vm: dup,
 3 vm: drop,         4 vm: swap,         5 vm: push,
 6 vm: pop,          7 vm: call,         8 vm: jump,
 9 vm: ;,           10 vm: >jump,       11 vm: <jump,
12 vm: !jump,       13 vm: =jump,       14 vm: @,
15 vm: !,           16 vm: +,           17 vm: -,
18 vm: *,           19 vm: /mod,        20 vm: and,
21 vm: or,          22 vm: xor,         23 vm: <<,
24 vm: >>,          25 vm: 0;           26 vm: 1+,
27 vm: 1-,          28 vm: in,          29 vm: out,
30 vm: wait,        98 vm: halt,

here IMAGE-SIZE allot target ! target @ origin !
jump, 0 m,

: t-here ( -n ) target @ origin @ - ;
: main:  ( -  ) t-here cr ." MAIN @ " dup . origin @ 1+ ! ;
: label: ( "- ) t-here constant ;
: #      ( n- ) lit, m, ;
: $,     ( $- ) dup getLength for dup @ m, 1+ next 0 m, drop ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( And now the metacompiler                                    )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  variable getxt
  : .colon getxt @ TRUE =if getxt off ;then call, m, ;
---reveal---
  : t: ( "- ) label: nop, nop, ['] .colon last @ d->class ! ;
  : t' ( "-a ) getxt on ;
}}

{{
  : cond ( -a ) target @ 0 m, ;
---reveal---
  : =if  ( -a ) !jump, cond ;
  : <if  ( -a ) >jump, cond ;
  : >if  ( -a ) <jump, cond ;
  : !if  ( -a ) =jump, cond ;
  : then ( a- ) t-here swap ! ;
}}

: repeat ( -a ) t-here ;
: again  ( a- ) jump, m, ;

: variable: ( n"- ) label: m, ;
: variable  ( "-  ) 0 variable: ;

: entry  ( a"- ) t-here link @ m, link ! m, m, 32 accept tib $, ;
: word:  ( a"- ) 'WORD @ entry ;
: macro: ( a"- ) 'MACRO @ entry ;
: data:  ( a"- ) 'DATA @ entry ;
: patch-dictionary ( - ) link @ chain @ ! ;
: mark-dictionary  ( - ) target @ chain ! ;

: set-class ( aa- ) ! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( The last bit is the trickiest: we need to safely relocate   )
( the new image over the old one. Since we can't use *any*    )
( code that calls into the old image, we must redefine all    )
( words necessary here.                                       )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  2 vars src dst
  : +! [ 2 , 5 , 14 , 16 , 6 , 15 , ] ;
  : ++ 1 [ 4 , ] +! ;
  : ! [ 15 , ] ;
  : @ [ 14 , ] ;
  : (copy) for src @ @ dst @ ! src ++ dst ++ next ;
  : copy ( aan- ) push dst ! src ! pop (copy) ;
  : save ( - )    1 4 [ 29 , ] 0 0 [ 29 , 30 , 99 , ] ;
---reveal---
  : boot-new
    origin @ 0 IMAGE-SIZE copy save ;
}}

: ; ;, ;; [
