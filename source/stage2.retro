( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Copyright [c] 2009, Charles Childers                        )
( License: ISC                                                )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( This contains the second stage of the Retro language. It's  )
( a collection of useful words and tools that make things     )
( nicer overall.                                              )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Allows Retro to "forget" a word, and anything defined after )
( it.                                                         )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: forget ( "- ) ' drop which @ dup heap ! @ last ! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Special class for words that correspond to opcodes. Inlines )
( if compiling, calls if interpreting.                        )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: .primitive ( a- )
  dup @ 0 =if compiler @ -1 =if 2 + @ , ;; then then .word ;

: p: ( "- ) ' drop ['] .primitive which @ d->class ! ;
p: 1+     p: 1-     p: swap   p: drop
p: and    p: or     p: xor    p: @
p: !      p: +      p: -      p: *
p: /mod   p: <<     p: >>     p: nip
p: dup    p: in     p: out
forget p:


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Shortcuts for incrementing and decrementing variables       )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: ++  ( a- )  1 swap +! ;
: --  ( a- )  1 swap -! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Allow changing the class of a word                          )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: reclass  ( a-  ) last @ d->class ! ;
: reclass: ( a"- ) ' drop which @ d->class ! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( These words provide a limited degree of control over the    )
( visibility of words.                                        )
(                                                             )
( In older versions of Retro, these were called loc: and ;loc )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( ... global scope ....                                       )
(                                                             )
( { ... start local scope, level 1                            )
(                                                             )
(   { ... start local scope, level 2                          )
(   } ... words in scope level 2 are no longer                )
(     ... visible                                             )
(                                                             )
( } ... words in scope level 1 are no longer                  )
(   ... visible                                               )
(                                                             )
( ... back to global scope ...                                )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
create <list>  ( -a )  0 , 0 , 0 , 0 , 0 ,
: { ( - ) last @ <list> @ 1+ <list> + ! <list> ++ ;
: } ( - ) <list> -- <list> @ 1+ <list> + @ last ! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( A somewhat more powerful scoping system                     )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( ... global scope ...                                        )
( {{                                                          )
(    ... local scope ...                                      )
( ---reveal---                                                )
(    ... global scope, with local scope still visible ...     )
( }}                                                          )
( ... global scope, local words not visible ...               )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: {{ ( - )  last @ <list> ! ;
: ---reveal---  ( - ) last @ <list> 1+ ! ;
here ] last repeat @ dup @ <list> 1+ @ =if ;; then again ;
: }} ( - )  <list> @ [ compile ] ! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( A simple word to allocate memory in a linear fashion. It's  )
( useful for arrays and similar things.                       )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: allot  ( n- )  heap +! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( These allow a more readable way to create variables and     )
( constants. It also makes constants more efficient.          )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: variable:  ( n"- )  create , ;
: variable   ( "-  )  0 variable: ;
: constant   ( n"- )  create last @ d->xt ! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Copy a block of memory from one location to another.        )
(   Takes source, dest, and a count.                          )
( Fill a memory range with a specific value.                  )
(   Takes an address, a value, and a count.                   )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )

{{
  variable src
  variable dst
  variable val
  : (copy) for src @ @ dst @ ! src ++ dst ++ next ;
  : (fill) for val @ dst @ ! dst ++ next ;
  ---reveal---
  : copy ( aan- ) push dst ! src ! pop (copy) ;
  : fill ( ann- ) push val ! dst ! pop (fill) ;
}}


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Make the most recently created word execute into a compiler )
( macro.                                                      )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: immediate ['] .macro reclass ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( ` is similar to POSTPONE in ANS FORTH. It compiles code to  )
( execute the following word with its class handler.          )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: ` ( "- )
  ' dup 0 !if literal, which @ d->class @ compile ;; then
  drop tib >number literal, ['] .data compile ; immediate


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Retro has some simple conditional forms, which tie the      )
( comparisons to the flow control. It's often useful to have  )
( separate functions for the comparisons, so I define them    )
( here.                                                       )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
-1 constant TRUE   ( -f )
 0 constant FALSE  ( -f )

: if ( f- )
  compiler @ 0; drop TRUE literal, ` =if ; immediate

: ;then ( - )
  compiler @ 0; drop ` ;; ` then ; immediate

: =  ( xy-f )  =if TRUE ;then FALSE ;
: <> ( xy-f )  !if TRUE ;then FALSE ;
: >  ( xy-f )  >if TRUE ;then FALSE ;
: <  ( xy-f )  <if TRUE ;then FALSE ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( pow = b^p                                                   )
( r = fetch copy of top value on return stack                 )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: pow       ( bp-n ) over here ! 1- 0; for here @ * next ;
: r         ( -n   ) ` pop ` dup ` push ; immediate


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Useful for range checking                                   )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: within ( xul-f )
  rot dup push > pop swap push < pop + -2 = ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( This is a rather common word that can be used to easily     )
( display a string.                                           )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: ." ( "- )
  compiler @ if ` s" ` type ;then " type ; immediate


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Numeric Bases                                               )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: decimal ( - ) 10 base ! ;
: hex     ( - ) 16 base ! ;
: octal   ( - )  8 base ! ;
: binary  ( - )  2 base ! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Search for a word by name                                   )
( It takes a string containing the name of the word to look   )
( for and returns an address and a flag. If true, the address )
( is the *dictionary header* of the word being looked for. If )
( false, just discard the address.                            )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  variable name
  variable found
  : prepare ( a-a )  found off name ! last @ ;
  : done    ( -af )  which @ found @ ;
  : match?  ( $-$f ) dup d->name name @ compare ;
  : search  ( $- )   repeat match? if which ! found on ;then @ 0; again ;
---reveal---
  : find ( "-af ) prepare search done ;
}}


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( does>                                                       )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: .does compiler @ if swap literal, compile pop drop ;; then drop ;
: does> 1 , here 0 , ` reclass ` ;; here swap ! here literal, ` .does ; immediate


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( A routine to evaluate a string of text as input             )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  variable count
  variable buffer
  : setup  ( an- )  count ! buffer ! ;
  : -remap ( - )    ['] key :devector ;
  : get    ( -c )   buffer @ @ ;
  : next   ( -c )
    count @ 0 =if 32 -remap ;then
    count -- get buffer ++ ;
  : remap  ( - )   ['] next ['] key :is ;
---reveal---
  : eval   ( an- ) setup remap ;
}}


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( This is a block editor that I've been using for many years. )
( It's simple, and doesn't have a lot of features, but it is  )
( more than enough for most of my prototyping work.           )
(                                                             )
( Actually, it's proven more popular than I ever expected. It )
( has been used by many of Retro's users, and implementations )
( now exist for several other Forth systems.                  )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Line and column numbers start at 0.                         )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Quick Reference:                                            )
(      # s        Select a new block                          )
(        p        Previous block                              )
(        n        Next block                                  )
(      # i ..     Insert .. into line                         )
(   # #2 ia ..    Insert .. into line [#2] starting at        )
(                 column [#]                                  )
(        x        Erase the current block                     )
(      # d        Erase the specified line                    )
(        v        Display the current block                   )
(        e        Evaluate Block                              )
(        new      Erase all blocks                            )
( # set-blocks    Set the # of blocks. Calls 'new'            )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( The memory layout and basic configuration.                  )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
variable #-blocks
variable offset

10 variable: line-ending

variable blk
: block     512 * offset @ + ;
: (block)   blk @ block ;
: (line)    64 * (block) + ;

: (v) ;
: (ia) ;
: v   ( -  ) (v) ;
: s   ( n- ) blk ! v ;
: d   ( n- ) (line) 32 64 fill v ;
: x   ( -  ) (block) 32 512 fill v ;
: p   ( -  ) blk -- v ;
: n   ( -  ) blk ++ v ;
: ia  ( nn"- ) (ia) ;
: i   ( n"- ) 0 swap ia v ;
: new ( -  ) offset @ 32 512 #-blocks @ * fill ;
: e   ( -  ) (block) 512 eval ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Default Block Viewer                                        )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{
  : (type)  for dup @ emit 1+ next ;
  : type    (type) drop ;
  : space   32 emit ;
  : row     . dup 64 type 64 + cr ;
  : .rows   0 row 1 row 2 row 3 row
            4 row 5 row 6 row 7 row ;
  : .block  ." Block: " blk @ . ." of " #-blocks @ . ;
  : x       ." +---:---+---:---" ;
  : bar     space space x x x x cr ;
  : vb      bar blk @ block .rows drop bar ;
  here is (v) ] clear vb .block ;
}


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Default "Insert At"                                         )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{
  variable ws
  : nofilter ( - ) whitespace dup @ ws ! off later ws @ whitespace ! ;
  : getline  ( - ) line-ending @ accept ;
  : setup    ( nn-aan ) tib swap tib getLength ;
  here is (ia) ] nofilter (line) + getline setup copy v ;
}

: set-blocks
  #-blocks ! #mem @ 512 #-blocks @ * - offset ! new ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( All done! Fill the blocks with spaces, and we're good to go )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
64 set-blocks


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( "see" - a simple decompiler                                 )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  variable addr

  : pad       ( -    ) addr @ @ 6 for dup base @ r pow <if 32 emit then next ;

  : .wrap     ( -   ) ." ( " later ."  )" ;
  : .name     ( a-  ) .wrap d->name type ;
  : resolve   ( -   ) last @ repeat dup d->xt @ addr @ @ =if .name ;then 0; @ again ;

  : token     ( "-  ) 32 accept tib keepString literal, ;
  : .op       ( a-  ) dup getLength swap type 6 swap - 0; for 32 emit next ;
  : .symbol   ( "-  ) token ` .op ` drop ; immediate
  : .value    (  -  ) addr ++ addr @ @ . pad resolve ;
  : sym:      ( "-  ) ` over ` =if ` .symbol ` ;then ; immediate
  : sym+:     ( "-  ) ` over ` =if ` .symbol ` .value ` ;then ; immediate

  : .ascii    ( c-  ) dup 32 128 within if 39 emit emit 39 emit then ;

  : decompile ( -   )
    addr @ @
     0 sym: nop      1 sym+: lit      2 sym: dup       3 sym: drop
     4 sym: swap     5 sym: push      6 sym: pop       7 sym+: call
     8 sym+: jump    9 sym: ;        10 sym+: >jump   11 sym+: <jump
    12 sym+: !jump  13 sym+: =jump   14 sym: @        15 sym: !
    16 sym: +       17 sym: -        18 sym: *        19 sym: /mod
    20 sym: and     21 sym: or       22 sym: xor      23 sym: <<
    24 sym: >>      25 sym: 0;       26 sym: 1+       27 sym: 1-
    28 sym: in      29 sym: out      30 sym: wait
    ." Unknown: " dup . .ascii
  ;

  : header? addr @ @ 9 =if addr @ 1+ @ 30 >if addr @ . decompile pop pop 2drop then then ;
  : vector? addr @ @ 0 =if addr @ 1+ @ 0 =if pop pop 2drop then then ;
  : more? header? vector? ;
---reveal---
  : see  ( "-  ) ' addr ! cr repeat addr @ . decompile cr addr ++ more? again ;
}}


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Make the most recently created word run only if the compiler)
( is on.                                                      )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  : warn compiler @ not if pop 2drop ." Error: compile-only" cr then ;
---reveal---
  : .compiler warn execute ;
  : compile-only ['] .compiler reclass ;
}}


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Remap a lot of the macros to be compile-only                )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: c: ' drop ['] .compiler which @ d->class ! ;

c: =if     c: >if
c: <if     c: !if
c: if      c: then
c: for     c: next
c: ;then   c: next
c: for     c: [']
c: pop     c: push
c: 0;      c: again
c: repeat  c: ;;
c: ;       c: s"

forget c:

save
bye
