( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Copyright [c] 2009, Charles Childers                        )
( License: ISC                                                )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( This contains the second stage of the Retro language. It's  )
( a collection of useful words and tools that make things     )
( nicer overall.                                              )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Allows Retro to "forget" a word, and anything defined after )
( it.                                                         )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: forget ( "- ) ' drop which @ dup heap ! @ last ! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Allow changing the class of a word                          )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: reclass  ( a-  ) last @ d->class ! ;
: reclass: ( a"- ) ' drop which @ d->class ! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Special class for words that correspond to opcodes. Inlines )
( if compiling, calls if interpreting.                        )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: .primitive ( a- )
  dup @ 0 =if compiler @ -1 =if 2 + @ , ;; then then .word ;

: p: ( "- ) ['] .primitive reclass: ;
p: 1+     p: 1-     p: swap   p: drop
p: and    p: or     p: xor    p: @
p: !      p: +      p: -      p: *
p: /mod   p: <<     p: >>     p: nip
p: dup    p: in     p: out
forget p:


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Make the most recently created word run only if the compiler)
( is on.                                                      )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: .compiler    ( a- ) compiler @ -1 =if execute ;; then drop ;
: compile-only ( "- ) ['] .compiler reclass ;

: c: ['] .compiler reclass: ;
c: =if     c: >if   c: <if     c: !if
c: then  c: for     c: next    c: [']
c: pop     c: push  c: 0;      c: again
c: repeat  c: ;;    c: ;       c: s"
forget c:


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Make the most recently created word execute into a compiler )
( macro.                                                      )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: immediate ['] .macro reclass ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Shortcuts for incrementing and decrementing variables       )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: ++  ( a- )  1 swap +! ;
: --  ( a- )  1 swap -! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( These words provide a limited degree of control over the    )
( visibility of words.                                        )
(                                                             )
( In older versions of Retro, these were called loc: and ;loc )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( ... global scope ....                                       )
(                                                             )
( { ... start local scope, level 1                            )
(                                                             )
(   { ... start local scope, level 2                          )
(   } ... words in scope level 2 are no longer                )
(     ... visible                                             )
(                                                             )
( } ... words in scope level 1 are no longer                  )
(   ... visible                                               )
(                                                             )
( ... back to global scope ...                                )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
create <list>  ( -a )  0 , 0 , 0 , 0 , 0 ,
: { ( - ) last @ <list> @ 1+ <list> + ! <list> ++ ;
: } ( - ) <list> -- <list> @ 1+ <list> + @ last ! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( A somewhat more powerful scoping system                     )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( ... global scope ...                                        )
( {{                                                          )
(    ... local scope ...                                      )
( ---reveal---                                                )
(    ... global scope, with local scope still visible ...     )
( }}                                                          )
( ... global scope, local words not visible ...               )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: {{ ( - )  last @ <list> ! ;
: ---reveal---  ( - ) last @ <list> 1+ ! ;
here ] last repeat @ dup @ <list> 1+ @ =if ;; then again ;
: }} ( - )  <list> @ [ compile ] ! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( A simple word to allocate memory in a linear fashion. It's  )
( useful for arrays and similar things.                       )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: allot  ( n- )  heap +! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( These allow a more readable way to create variables and     )
( constants. It also makes constants more efficient.          )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: variable:  ( n"- )  create , ;
: variable   ( "-  )  0 variable: ;
: constant   ( n"- )  create last @ d->xt ! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Copy a block of memory from one location to another.        )
(   Takes source, dest, and a count.                          )
( Fill a memory range with a specific value.                  )
(   Takes an address, a value, and a count.                   )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )

{{
  variable src
  variable dst
  variable val
  : (copy) for src @ @ dst @ ! src ++ dst ++ next ;
  : (fill) for val @ dst @ ! dst ++ next ;
  ---reveal---
  : copy ( aan- ) push dst ! src ! pop (copy) ;
  : fill ( ann- ) push val ! dst ! pop (fill) ;
}}


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( ` is similar to POSTPONE in ANS FORTH. It compiles code to  )
( execute the following word with its class handler.          )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: ` ( "- )
  ' dup 0 !if literal, which @ d->class @ compile ;; then
  drop tib >number literal, ['] .data compile ; immediate


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( stub creates an empty word that exists as a vector point    )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: stub ` : ` ; ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Retro has some simple conditional forms, which tie the      )
( comparisons to the flow control. It's often useful to have  )
( separate functions for the comparisons, so I define them    )
( here.                                                       )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
-1 constant TRUE   ( -f )
 0 constant FALSE  ( -f )

: if ( f- )
  compiler @ 0; drop TRUE literal, ` =if ; compile-only

: ;then ( - )
  compiler @ 0; drop ` ;; ` then ; compile-only

: =  ( xy-f )  =if TRUE ;then FALSE ;
: <> ( xy-f )  !if TRUE ;then FALSE ;
: >  ( xy-f )  >if TRUE ;then FALSE ;
: <  ( xy-f )  <if TRUE ;then FALSE ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( pow = b^p                                                   )
( r = fetch copy of top value on return stack                 )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: pow ( bp-n ) over here ! 1- 0; for here @ * next ;
: r   ( -n   ) ` pop ` dup ` push ; compile-only


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Useful for range checking                                   )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: within ( xul-f )
  rot dup push > pop swap push < pop + -2 = ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( This is a rather common word that can be used to easily     )
( display a string.                                           )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: ." ( "- )
  compiler @ if ` s" ` type ;then " type ; immediate


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Numeric Bases                                               )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: decimal ( - ) 10 base ! ;
: hex     ( - ) 16 base ! ;
: octal   ( - )  8 base ! ;
: binary  ( - )  2 base ! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Search for a word by name                                   )
( It takes a string containing the name of the word to look   )
( for and returns an address and a flag. If true, the address )
( is the *dictionary header* of the word being looked for. If )
( false, just discard the address.                            )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  variable name
  variable found
  : prepare ( a-a )  found off name ! last @ ;
  : done    ( -af )  which @ found @ ;
  : match?  ( $-$f ) dup d->name name @ compare ;
  : search  ( $- )   repeat match? if which ! found on ;then @ 0; again ;
---reveal---
  : find ( "-af ) prepare search done ;
}}


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( does>                                                       )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: .does compiler @ if swap literal, compile pop drop ;; then drop ;
: does> 1 , here 0 , ` reclass ` ;; here swap ! here literal, ` .does ; compile-only


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( A routine to evaluate a string of text as input             )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  variable count
  variable buffer
  : setup  ( an- )  count ! buffer ! ;
  : -remap ( - )    ['] key :devector ;
  : get    ( -c )   buffer @ @ ;
  : next   ( -c )
    count @ 0 =if 32 -remap ;then
    count -- get buffer ++ ;
  : remap  ( - )   ['] next ['] key :is ;
---reveal---
  : eval   ( an- ) setup remap ;
}}


save
bye
