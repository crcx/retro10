( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Copyright [c] 2009, Charles Childers                        )
( License: ISC                                                )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( This contains the second stage of the Retro language. It's  )
( a collection of useful words and tools that make things     )
( nicer overall.                                              )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Allows Retro to "forget" a word, and anything defined after )
( it.                                                         )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: forget ( "- ) ' 0; drop which @ dup heap ! @ last ! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Get a dictionary pointer for a word                         )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: d'      ( "-a  ) ' drop which @ ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Allow changing the class of a word                          )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: reclass  ( a-  ) last @ d->class ! ;
: reclass: ( a"- ) d' d->class ! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Special class for words that correspond to opcodes. Inlines )
( if compiling, calls if interpreting.                        )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: .primitive ( a- )
  dup @ 0 =if compiler @ -1 =if 2 + @ , ;; then then .word ;

: p: ( "- ) ['] .primitive reclass: ;
p: 1+     p: 1-     p: swap   p: drop
p: and    p: or     p: xor    p: @
p: !      p: +      p: -      p: *
p: /mod   p: <<     p: >>     p: dup
p: in     p: out
forget p:


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Make the most recently created word run only if the compiler)
( is on.                                                      )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: .compiler    ( a- ) compiler @ -1 =if execute ;; then drop ;
: compile-only ( "- ) ['] .compiler reclass ;

: c: ['] .compiler reclass: ;
c: =if     c: >if   c: <if     c: !if
c: then    c: for   c: next    c: [']
c: pop     c: push  c: 0;      c: again
c: repeat  c: ;;    c: ;       c: s"
forget c:


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Make the most recently created word execute into a compiler )
( macro.                                                      )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: immediate ( - ) ['] .macro reclass ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Return ASCII value of a character                           )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: char: ( "-c ) 32 accept tib @ .data ; immediate


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Shortcuts for incrementing and decrementing variables       )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: ++  ( a- )  1 swap +! ;
: --  ( a- )  1 swap -! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( These words provide a limited degree of control over the    )
( visibility of words.                                        )
(                                                             )
( In older versions of Retro, these were called loc: and ;loc )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( ... global scope ....                                       )
(                                                             )
( { ... start local scope, level 1                            )
(                                                             )
(   { ... start local scope, level 2                          )
(   } ... words in scope level 2 are no longer                )
(     ... visible                                             )
(                                                             )
( } ... words in scope level 1 are no longer                  )
(   ... visible                                               )
(                                                             )
( ... back to global scope ...                                )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
create <list>  ( -a )  0 , 0 , 0 , 0 , 0 ,
: { ( - ) last @ <list> @ 1+ <list> + ! <list> ++ ;
: } ( - ) <list> -- <list> @ 1+ <list> + @ last ! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( A somewhat more powerful scoping system                     )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( ... global scope ...                                        )
( {{                                                          )
(    ... local scope ...                                      )
( ---reveal---                                                )
(    ... global scope, with local scope still visible ...     )
( }}                                                          )
( ... global scope, local words not visible ...               )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: {{ ( - )  last @ <list> ! ;
: ---reveal---  ( - ) last @ <list> 1+ ! ;
here ] last repeat @ dup @ <list> 1+ @ =if ;; then again ;
: }} ( - )  <list> @ [ compile ] ! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( These allow a more readable way to create variables and     )
( constants. It also makes constants more efficient.          )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: variable:  ( n"- )  create , ;
: variable   ( "-  )  0 variable: ;
: constant   ( n"- )  create last @ d->xt ! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( A simple word to allocate memory in a linear fashion. It's  )
( useful for arrays and similar things.                       )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: allot  ( n- )  heap +! ;
: zallot ( n- )  dup 0 <if allot ;; then repeat 0; 1- 0 , again ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Copy a block of memory from one location to another.        )
(   Takes source, dest, and a count.                          )
( Fill a memory range with a specific value.                  )
(   Takes an address, a value, and a count.                   )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: copy ( aan- ) for push @+ pop !+ next 2drop ;
: fill ( ann- ) swap here ! for here @ swap !+ next drop ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( ` is similar to POSTPONE in ANS FORTH. It compiles code to  )
( execute the following word with its class handler.          )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: ` ( "- )
  ' dup 0 !if literal, which @ d->class @ compile ;; then
  drop tib >number literal, ['] .data compile ; compile-only


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( stub creates an empty word that exists as a vector point    )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: stub ( "- ) ` : ` ; ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Retro has some simple conditional forms, which tie the      )
( comparisons to the flow control. It's often useful to have  )
( separate functions for the comparisons, so I define them    )
( here.                                                       )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
-1 constant TRUE   ( -f )
 0 constant FALSE  ( -f )

: if    ( f-  ) FALSE literal, ` !if ; compile-only
: if;   ( f-  ) ` not ` 0; ` drop ; compile-only
: ;then ( a-  ) ` ;; ` then ; compile-only
: else  ( a-a ) 8 , here 0 , ` ahead swap ` then ; compile-only

: =  ( xy-f )  =if TRUE ;then FALSE ;
: <> ( xy-f )  !if TRUE ;then FALSE ;
: >  ( xy-f )  >if TRUE ;then FALSE ;
: <  ( xy-f )  <if TRUE ;then FALSE ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( pow = b^p                                                   )
( r = fetch copy of top value on return stack                 )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: pow ( bp-n ) over here ! 1- 0; for here @ * next ;
: r   ( -n   ) ` pop ` dup ` push ; compile-only
: rdrop ( -  ) ` pop ` drop ; compile-only

( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Useful for range checking                                   )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: within ( xul-f )
  rot dup push > pop swap push < pop + -2 = ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( This is a rather common word that can be used to easily     )
( display a string.                                           )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: ." ( "- )
  compiler @ if ` s" ` type ;then " type ; immediate


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Numeric Bases                                               )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: decimal ( - ) 10 base ! ;
: hex     ( - ) 16 base ! ;
: octal   ( - )  8 base ! ;
: binary  ( - )  2 base ! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Search for a word by name                                   )
( It takes a string containing the name of the word to look   )
( for and returns an address and a flag. If true, the address )
( is the *dictionary header* of the word being looked for. If )
( false, just discard the address.                            )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  variable name
  variable found
  : prepare ( a-a )  found off name ! last @ ;
  : done    ( -af )  which @ found @ ;
  : match?  ( $-$f ) dup d->name name @ compare ;
  : search  ( $- )   repeat match? if which ! found on ;then @ 0; again ;
---reveal---
  : find ( "-af ) prepare search done ;
}}


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( does>                                                       )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: .does ( a- ) compiler @ if swap literal, compile rdrop ;then drop ;
: does> 1 , here 0 , ` reclass ` ;; here swap ! here literal, ` .does ; compile-only


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Display a space                                             )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: space ( - ) 32 emit ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( A routine to evaluate a string of text as input             )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  variable count
  variable buffer
  : restore ( -   )  ['] ekey :devector ok ;
  : get     ( -c  )  buffer @ @ ;
  : next    ( -c  )
    count @ 0 =if 32 restore ;then
    count -- get buffer ++ ;
  : replace ( -   )  ['] next ['] ekey :is ;
---reveal---
  : eval    ( an- ) count ! buffer ! replace ;
}}


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Conditionally execute code if a word exists                 )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  : defined    ( "-f ) 32 accept tib find nip ;
  : evalTib    ( -   ) tib dup getLength eval ;
  : block      ( "-  ) key char: { =if char: { emit char: } accept else ." Invalid Syntax" cr then ;
  : evalBlock  ( "-  ) block evalTib ;
  : ifBlock    ( f"- ) if evalBlock ;then block ;
---reveal---
  : ifDefined    ( "- ) defined ifBlock ;
  : ifNotDefined ( "- ) defined not ifBlock ;
}}


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( fori / nexti                                                )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: fori ( n- ) ` dup ` push ` for ` pop ` pop ` 2dup
              ` push ` push ` swap ` - ; compile-only
: nexti ( - ) ` next ` rdrop ; compile-only


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Use this before drawing a large amount of text; it'll delay )
( all video updates until the caller exits                    )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  : fast ( - ) ;
---reveal---
  : fastRender ( - )
    ['] fast ['] redraw :is later ['] redraw :devector redraw ;
}}


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Elements are equivalent to variables, but are contiguous.   )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  : list     (  n-a ) here swap zallot ;
  : setxt    (  a-  ) last @ d->xt ! ;
  : element  (  a-a ) create dup setxt 1+ ;
  ---reveal---
  : elements ( n"-  ) dup list swap for element next drop ;
}}


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( >last and expose -- move a dictionary header to the top of  )
( the dictionary.                                             )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  : after   ( a-a  ) last repeat @ 2dup @ =if nip ;then again ;
  : remove  ( a-   ) dup @ swap after ! ;
  : replace ( a-   ) last @ over ! last ! ;
  ---reveal---
  : >last   ( a-   ) dup remove replace ;
  : expose  ( "-   ) d' >last ;
}}


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( A vocab word is a word that can be used to open and shut a  )
( vocabulary section from the dictionary. It consists of      )
( three fields which point to three dictionary headers: the   )
( word before the vocabulary starts, the first word to be     )
( hidden, and the first word not to be hidden.                )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  3 elements shown hidden before
  : tod     (  -a ) last @ ;
  : nod     (  -a ) tod @ ;
  : current (  -a ) shown @ ;
  : .shown  (  -a ) current d->xt @ ;
  : .hidden (  -a ) .shown 1+ ;
  : .before (  -a ) .shown 1+ 1+ ;
  : after   ( a-a ) last repeat @ 2dup @ =if nip ;then again ;
  : remove  (  a- ) current dup @ swap after ! ;
  : replace (  a- ) current tod over ! last ! ;
  : fields  (   - ) shown .shown 3 copy ;
  : open    ( a- ) @ shown ! .hidden @ .shown @ ! ;
  : shut    ( a- ) @ shown ! .before @ .shown @ ! ;
  : :find   ( a-af   ) last repeat @ 2dup =if drop @ TRUE ;then dup 0; drop again ;
  : open?   ( a-af   ) dup 1+ @ :find nip ;
  : toggle  ( a-     ) open? if shut ;then open ;
  ---reveal---
  expose open expose shut
  : .vocab  ( a- a"- ) compiler @ if literal, then ` toggle ;
  : vocab ( "- ) create 3 allot ['] .vocab reclass ;
  : (( tod shown ! nod before ! 0 hidden ! fields ;
  : )) tod hidden ! fields remove replace ;
}}
